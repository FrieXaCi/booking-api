generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "sqlite"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Amenity {
  id              String            @id @default(uuid())
  name            String
  properties      Property[]
  PropertyAmenity PropertyAmenity[]
}

model PropertyAmenity {
  propertyId String
  amenityId  String
  Property   Property @relation(fields: [propertyId], references: [id])
  Amenity    Amenity  @relation(fields: [amenityId], references: [id])

  @@id([amenityId])
  @@index([propertyId])
}

model Booking {
  id             String   @id @default(uuid())
  userId         String
  propertyId     String
  checkinDate    DateTime
  checkoutDate   DateTime
  numberOfGuests Int
  totalPrice     Float
  bookingStatus  String
  User           User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  Property       Property @relation(fields: [propertyId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@index([userId])
  @@index([propertyId])
}

model Host {
  id             String     @id @default(uuid())
  username       String     @unique
  password       String
  name           String
  email          String
  phoneNumber    String
  profilePicture String
  aboutMe        String
  listings       Property[]
}

model Property {
  id              String            @id @default(uuid())
  title           String
  description     String
  location        String
  pricePerNight   Int
  bedroomCount    Int
  bathRoomCount   Int
  maxGuestCount   Int
  hostId          String
  rating          Int
  bookings        Booking[]
  reviews         Review[]
  amenities       Amenity[]
  PropertyAmenity PropertyAmenity[]
  Host            Host              @relation(fields: [hostId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@index([hostId])
}

model Review {
  id         String   @id @default(uuid())
  userId     String
  propertyId String
  rating     Int
  comment    String
  User       User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  Property   Property @relation(fields: [propertyId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@index([userId])
  @@index([propertyId])
}

model User {
  id             String    @id @default(uuid())
  username       String    @unique
  password       String
  name           String
  email          String
  phoneNumber    String
  profilePicture String
  bookings       Booking[]
  reviews        Review[]
}
